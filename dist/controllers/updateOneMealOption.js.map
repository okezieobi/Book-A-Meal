{"version":3,"sources":["../../controllers/updateOneMealOption.js"],"names":["bookAMeal","updateOneMealOption","req","res","body","mealOptionName","test","status","send","message","mealOptionPrice","find","data","meals","mealOptionList","meal","id","parseInt","params","mealId","length","mealFormat","push","splice"],"mappings":";;;;;;AAAA;;;;AAEA;;;;;;;AADA;;;AAGAA,gBAAUC,mBAAV;AAAA,qEAAgC,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAC1B,CAACD,IAAIE,IAAJ,CAASC,cAAV,IAA4BH,IAAIE,IAAJ,CAASC,cAAT,KAA4B,EAAxD,IAA+D,aAAD,CAAgBC,IAAhB,CAAqBJ,IAAIE,IAAJ,CAASC,cAA9B,MAAkD,KADtF;AAAA;AAAA;AAAA;;AAE5BF,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;AAF4B;AAAA;;AAAA;AAAA,kBAKnB,CAACP,IAAIE,IAAJ,CAASM,eAAV,IAA6BR,IAAIE,IAAJ,CAASM,eAAT,KAA6B,EAA1D,IAAiE,UAAD,CAAaJ,IAAb,CAAkBJ,IAAIE,IAAJ,CAASM,eAA3B,MAAgD,KAL7F;AAAA;AAAA;AAAA;;AAM5BP,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;AAN4B;AAAA;;AAAA;AAUtBE,gBAVsB,GAUfC,iBAAKC,KAAL,CAAWC,cAAX,CAA0BH,IAA1B,CAA+B;AAAA,qBAAQI,KAAKC,EAAL,KAAYC,SAASf,IAAIgB,MAAJ,CAAWF,EAApB,EAAwB,EAAxB,CAApB;AAAA,aAA/B,CAVe;;AAAA,gBAWvBL,IAXuB;AAAA;AAAA;AAAA;;AAY1BT,gBAAIE,IAAJ,CAASe,MAAT,GAAkBP,iBAAKC,KAAL,CAAWC,cAAX,CAA0BM,MAA5C;AAZ0B,0BAapBR,iBAAKC,KAAL,CAAWC,cAbS;AAAA;AAAA,mBAaiBF,iBAAKC,KAAL,CAAWQ,UAAX,CAAsBnB,IAAIE,IAA1B,CAbjB;;AAAA;AAAA;AAAA;AAAA,+BAaMkB,IAbN;;AAAA;AAc1BnB,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;AAd0B;AAAA;;AAAA;AAkB1BP,gBAAIE,IAAJ,CAASe,MAAT,GAAkBR,KAAKK,EAAvB;AAlB0B,0BAmBpBJ,iBAAKC,KAAL,CAAWC,cAnBS;AAAA,0BAmBaH,KAAKK,EAnBlB;AAAA;AAAA,mBAmB+BJ,iBAAKC,KAAL,CAAWQ,UAAX,CAAsBnB,IAAIE,IAA1B,CAnB/B;;AAAA;AAAA;AAAA;AAAA,+BAmBMmB,MAnBN,gCAmBsB,CAnBtB;;AAAA;AAoB1BpB,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;;AApB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;kBA2BeT,gBAAUC,mB","file":"updateOneMealOption.js","sourcesContent":["import data from '../models';\n// @ts-ignore\nimport bookAMeal from './index';\n\nbookAMeal.updateOneMealOption = async (req, res) => {\n  if (!req.body.mealOptionName || req.body.mealOptionName === '' || (/^[A-Za-z]+$/).test(req.body.mealOptionName) === false) {\n    res.status(400).send({\n      message: 'Fail! Meal option name is required OR must be letters',\n    });\n  } else if (!req.body.mealOptionPrice || req.body.mealOptionPrice === '' || (/^[0-9]+$/).test(req.body.mealOptionPrice) === false) {\n    res.status(400).send({\n      message: 'Fail! Meal option price is required OR must be numbers',\n    });\n  } else {\n    const find = data.meals.mealOptionList.find(meal => meal.id === parseInt(req.params.id, 10));\n    if (!find) {\n      req.body.mealId = data.meals.mealOptionList.length;\n      await data.meals.mealOptionList.push(await data.meals.mealFormat(req.body));\n      res.status(201).send({\n        message: 'Meal option not found! Meal option successfully created',\n      });\n    } else {\n      req.body.mealId = find.id;\n      await data.meals.mealOptionList.splice(find.id, 1, await data.meals.mealFormat(req.body));\n      res.status(200).send({\n        message: 'Meal option found! Meal option successfully updated',\n      });\n    }\n  }\n};\n\nexport default bookAMeal.updateOneMealOption;\n"]}