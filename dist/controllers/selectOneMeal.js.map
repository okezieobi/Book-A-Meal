{"version":3,"sources":["../../controllers/selectOneMeal.js"],"names":["bookAMeal","selectOneMeal","req","res","body","customerName","menuList","status","send","message","test","orderId","data","orders","orderList","length","orderFormat","selectedMeal","push"],"mappings":";;;;;;AAAA;;;;AAEA;;;;;;;AADA;;;AAGAA,gBAAUC,aAAV;AAAA,qEAA0B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKlBD,IAAIE,IALc,EAGpBC,YAHoB,aAGpBA,YAHoB,EAIpBC,QAJoB,aAIpBA,QAJoB;;AAAA,kBAMlB,CAACD,YAAD,IAAiBA,iBAAiB,EANhB;AAAA;AAAA;AAAA;;AAOpBF,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;AAPoB;AAAA;;AAAA;AAAA,kBAUV,aAAD,CAAgBC,IAAhB,CAAqBL,YAArB,MAAuC,KAV5B;AAAA;AAAA;AAAA;;AAWpBF,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;AAXoB;AAAA;;AAAA;AAAA,kBAcX,CAACH,QAAD,IAAaA,aAAa,EAdf;AAAA;AAAA;AAAA;;AAepBH,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;AAfoB;AAAA;;AAAA;AAAA,kBAkBV,eAAD,CAAkBC,IAAlB,CAAuBJ,QAAvB,MAAqC,KAlB1B;AAAA;AAAA;AAAA;;AAmBpBH,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS;AADU,aAArB;AAnBoB;AAAA;;AAAA;AAuBpBP,gBAAIE,IAAJ,CAASO,OAAT,GAAmBC,iBAAKC,MAAL,CAAYC,SAAZ,CAAsBC,MAAzC;AAvBoB;AAAA,mBAwBOH,iBAAKC,MAAL,CAAYG,WAAZ,CAAwBd,IAAIE,IAA5B,CAxBP;;AAAA;AAwBda,wBAxBc;AAAA;AAAA,mBAyBdL,iBAAKC,MAAL,CAAYC,SAAZ,CAAsBI,IAAtB,CAA2BD,YAA3B,CAzBc;;AAAA;AA0BpBd,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,uBAAS,uCADU;AAEnBG,oBAAMK;AAFa,aAArB;;AA1BoB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;kBAoCejB,gBAAUC,a","file":"selectOneMeal.js","sourcesContent":["import data from '../models';\n// @ts-ignore\nimport bookAMeal from './index';\n\nbookAMeal.selectOneMeal = async (req, res) => {\n  try {\n    const {\n      customerName,\n      menuList,\n    } = req.body;\n    if (!customerName || customerName === '') {\n      res.status(400).send({\n        message: 'Fail! Customer name is required',\n      });\n    } else if ((/^[A-Za-z]+$/).test(customerName) === false) {\n      res.status(400).send({\n        message: 'Fail! Customer name must be letters with no spacing',\n      });\n    } else if (!menuList || menuList === '') {\n      res.status(400).send({\n        message: 'Fail! Menu options are required',\n      });\n    } else if ((/^[A-Za-z\\s]+$/).test(menuList) === false) {\n      res.status(400).send({\n        message: 'Fail! Menu options must be letters and seperated by spaces',\n      });\n    } else {\n      req.body.orderId = data.orders.orderList.length;\n      const selectedMeal = await data.orders.orderFormat(req.body);\n      await data.orders.orderList.push(selectedMeal);\n      res.status(201).send({\n        message: 'Success! Menu selected and order made',\n        data: selectedMeal,\n      });\n    }\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport default bookAMeal.selectOneMeal;\n"]}