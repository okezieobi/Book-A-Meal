{"version":3,"sources":["../../test/updateOneOrder.js"],"names":["chai","use","chaiHttp","describe","testOrderId","before","dataSetup","meals","menus","orders","secondTestId","it","testData","customerName","menuList","request","app","put","send","response","to","have","status","be","an","body","property","equal","data","has","wrongId"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/orders/:id\" to update or create a menu order', () => {\n  let testOrderId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testOrderId += dataSetup.secondTestId;\n  });\n\n  it('should update a menu order at \"/v1/orders/:id\" with PUT if all data in request are valid', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(200);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Menu order found, menu order successfully updated');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should also create a menu order at \"/v1/orders/:id\" with PUT if all data in request are valid but menu order does not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(201);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Menu order not found, menu order successfully created');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if customer name does not exist and menu order exists', async () => {\n    const testData = {\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if customer name and menu order do NOT exist', async () => {\n    const testData = {\n      menuList: 'Lunch Dinner',\n    };\n\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if customer name is an empty string and menu order exists', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if customer name is an empty string and menu order does not exist', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if customer name are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'oor](iuiro/{',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if customer name are not letters and menu order does NOT exist', async () => {\n    const testData = {\n      customerName: 'oor](iuiro/{',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if menu list does not exist and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if menu list and menu order do not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if menu list is an empty string and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if menu list is an empty string and menu order does not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if menu list are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '0r94d0[}(uui',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list must be letters and seperated by spaces');\n  });\n\n  it('should not update amenu order at \"/v1/orders\" with PUT if menu list are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '0r94d0[}(uui',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list must be letters and seperated by spaces');\n  });\n});\n"],"file":"updateOneOrder.js"}