{"version":3,"sources":["../../test/updateOneOrder.js"],"names":["chai","use","chaiHttp","describe","testOrderId","before","dataSetup","meals","menus","orders","secondTestId","it","testData","customerName","menuList","request","app","put","send","response","to","have","status","be","an","body","property","equal","data","has","wrongId"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/orders/:id\" to update or create a menu order', () => {\n  let testOrderId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testOrderId += dataSetup.secondTestId;\n  });\n\n  it('should update a menu order at \"/v1/orders/:id\" with PUT if all data in request are valid', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(200);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Menu order found, menu order successfully updated');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should also create a menu order at \"/v1/orders/:id\" with PUT if all data in request are valid but menu order does not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(201);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Menu order not found, menu order successfully created');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if customer name does not exist and menu order exists', async () => {\n    const testData = {\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if customer name and menu order do NOT exist', async () => {\n    const testData = {\n      menuList: 'Lunch Dinner',\n    };\n\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if customer name is an empty string and menu order exists', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if customer name is an empty string and menu order does not exist', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if customer name are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'oor](iuiro/{',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if customer name are not letters and menu order does NOT exist', async () => {\n    const testData = {\n      customerName: 'oor](iuiro/{',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if menu list does not exist and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if menu list and menu order do not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if menu list is an empty string and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if menu list is an empty string and menu order does not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if menu list are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '0r94d0[}(uui',\n    };\n    const response = await chai.request(app).put(`/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list must be letters and seperated by spaces');\n  });\n\n  it('should not update a menu order at \"/v1/orders\" with PUT if menu list are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '0r94d0[}(uui',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list must be letters and seperated by spaces');\n  });\n});\n"],"file":"updateOneOrder.js"}