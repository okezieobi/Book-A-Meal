{"version":3,"sources":["../../test/updateOneOrder.js"],"names":["chai","use","chaiHttp","describe","testOrderId","before","dataSetup","meals","menus","orders","secondTestId","it","testData","customerName","menuList","request","app","put","send","response","to","have","status","be","an","body","property","equal","data","has","wrongId","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/api/v1/orders/:id\" to update or create a menu order', () => {\n  let testOrderId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testOrderId += dataSetup.secondTestId;\n  });\n\n  it('should update a menu order at \"/api/v1/orders/:id\" with PUT if all data in request are valid', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(200);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Menu order found, menu order successfully updated');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should also create a menu order at \"/api/v1/orders/:id\" with PUT if all data in request are valid but menu order does not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/api/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(201);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Menu order not found, menu order successfully created');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name does not exist and menu order exists', async () => {\n    const testData = {\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name and menu order do NOT exist', async () => {\n    const testData = {\n      menuList: 'Lunch Dinner',\n    };\n\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/api/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name is an empty string and menu order exists', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name is undefined and menu order exists', async () => {\n    const testData = {\n      customerName: undefined,\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name is null and menu order exists', async () => {\n    const testData = {\n      customerName: null,\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name is an empty string and menu order does not exist', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/api/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'oor](iuiro/{',\n      menuList: 'Lunch Dinner',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if customer name are not letters and menu order does NOT exist', async () => {\n    const testData = {\n      customerName: 'oor](iuiro/{',\n      menuList: 'Lunch Dinner',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/api/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list does not exist and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list and menu order do not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/api/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list is an empty string and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list is null and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: null,\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list is undefined and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: undefined,\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list is an empty string and menu order does not exist', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/api/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '0r94d0[}(uui',\n    };\n    const response = await chai.request(app).put(`/api/v1/orders/${testOrderId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list must be letters and seperated by spaces');\n  });\n\n  it('should not update a menu order at \"/api/v1/orders\" with PUT if menu list are not letters and menu order exists', async () => {\n    const testData = {\n      customerName: 'Okezie',\n      menuList: '0r94d0[}(uui',\n    };\n    const wrongId = testOrderId + 10;\n    const response = await chai.request(app).put(`/api/v1/orders/${wrongId}`).send(testData);\n    expect(response).to.have.status(400);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list must be letters and seperated by spaces');\n  });\n});\n"],"file":"updateOneOrder.js"}