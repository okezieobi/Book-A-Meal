{"version":3,"sources":["../../test/selectOneMeal.js"],"names":["chai","use","chaiHttp","describe","before","dataSetup","meals","menus","orders","it","testData","customerName","menuList","request","app","post","send","response","to","have","status","be","an","body","property","equal","data","has"],"mappings":"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","file":"selectOneMeal.js","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/orders\" to select meal option with POST', () => {\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n  });\n\n  it('should select at least one menu option at \"/v1/orders\" with POST', async () => {\n    const testData = {\n      customerName: 'Frank',\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(201);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Success! Menu selected and order made');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should not select a menu option at \"/v1/orders\" with POST if customer name in request does not exist', async () => {\n    const testData = {\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not select a menu option at \"/v1/orders\" with POST if customer name in request is an empty string', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not select a menu option at \"/v1/orders\" with POST if customer name in request are not letters', async () => {\n    const testData = {\n      customerName: '0or]f{(uu',\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters with no spacing');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request does not exist', async () => {\n    const testData = {\n      customerName: 'Frank',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options are required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request is an empty string', async () => {\n    const testData = {\n      customerName: 'Frank',\n      menuList: '',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options are required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request ae not letters', async () => {\n    const testData = {\n      customerName: 'Frank',\n      menuList: '0{0rir}t[(',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options must be letters and seperated by spaces');\n  });\n});\n"]}