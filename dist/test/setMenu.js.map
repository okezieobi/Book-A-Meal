{"version":3,"sources":["../../test/setMenu.js"],"names":["chai","use","chaiHttp","describe","before","dataSetup","meals","menus","orders","it","testData","menuName","menuOptions","request","app","post","send","response","to","have","status","be","an","body","property","equal","data"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/menus\" to set menus with POST', () => {\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n  });\n\n  it('should set a menu at \"/v1/menus\" with post if all request data are valid', async () => {\n    const testData = {\n      menuName: 'Launch',\n      menuOptions: 'Dodo Rice',\n    };\n    const response = await chai.request(app).post('/v1/menus').send(testData);\n    expect(response).to.have.status(201);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Success! Menu created');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('name').equal(testData.menuName);\n    expect(response.body.data).to.have.property('total');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu name in request does not exist', async () => {\n    const testData = {\n      menuOptions: 'Dodo Beans',\n    };\n    const response = await chai.request(app).post('/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu name is required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu name in request is an empty string', async () => {\n    const testData = {\n      menuName: '',\n      menuOptions: 'Dodo Beans',\n    };\n    const response = await chai.request(app).post('/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu name is required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu name in request are not letters', async () => {\n    const testData = {\n      menuName: '}04[}(odyr',\n      menuOptions: 'Dodo Beans',\n    };\n    const response = await chai.request(app).post('/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu name must be letters with no spacing');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request does not exist', async () => {\n    const testData = {\n      menuName: 'Launch',\n    };\n    const response = await chai.request(app).post('/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options are required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request is an empty string', async () => {\n    const testData = {\n      menuName: 'Launch',\n      menuOptions: '',\n    };\n    const response = await chai.request(app).post('/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options are required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request are not letters', async () => {\n    const testData = {\n      menuName: 'Launch',\n      menuOptions: '90{f]f9d()',\n    };\n    const response = await chai.request(app).post('/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options must be letters and seperated by spaces');\n  });\n});\n"],"file":"setMenu.js"}