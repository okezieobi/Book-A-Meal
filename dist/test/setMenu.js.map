{"version":3,"sources":["../../test/setMenu.js"],"names":["chai","use","chaiHttp","describe","before","dataSetup","meals","menus","orders","it","testData","menuName","menuOptions","request","app","post","send","response","to","have","status","be","an","body","property","equal","data"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/api/v1/menus\" to set menus with POST', () => {\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n  });\n\n  it('should set a menu at \"/api/v1/menus\" with post if all request data are valid', async () => {\n    const testData = {\n      menuName: 'Launch',\n      menuOptions: 'Dodo Rice',\n    };\n    const response = await chai.request(app).post('/api/v1/menus').send(testData);\n    expect(response).to.have.status(201);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Success! Menu created');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('menuName').equal(testData.menuName);\n    expect(response.body.data).to.have.property('total');\n  });\n\n  it('should not create a menu at \"/api/v1/menus\" with POST if menu name in request does not exist', async () => {\n    const testData = {\n      menuOptions: 'Dodo Beans',\n    };\n    const response = await chai.request(app).post('/api/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu name is required');\n  });\n\n  it('should not create a menu at \"/api/v1/menus\" with POST if menu name in request is an empty string', async () => {\n    const testData = {\n      menuName: '',\n      menuOptions: 'Dodo Beans',\n    };\n    const response = await chai.request(app).post('/api/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu name is required');\n  });\n\n  it('should not create a menu at \"/api/v1/menus\" with POST if menu name in request are not letters', async () => {\n    const testData = {\n      menuName: '}04[}(odyr',\n      menuOptions: 'Dodo Beans',\n    };\n    const response = await chai.request(app).post('/api/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu name must be letters');\n  });\n\n  it('should not create a menu at \"/api/v1/menus\" with POST if menu options in request does not exist', async () => {\n    const testData = {\n      menuName: 'Launch',\n    };\n    const response = await chai.request(app).post('/api/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options is required');\n  });\n\n  it('should not create a menu at \"/api/v1/menus\" with POST if menu options in request is an empty string', async () => {\n    const testData = {\n      menuName: 'Launch',\n      menuOptions: '',\n    };\n    const response = await chai.request(app).post('/api/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options is required');\n  });\n\n  it('should not create a menu at \"/api/v1/menus\" with POST if menu options in request are not letters', async () => {\n    const testData = {\n      menuName: 'Launch',\n      menuOptions: '90{f]f9d()',\n    };\n    const response = await chai.request(app).post('/api/v1/menus').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu options must be letters and seperated by spaces');\n  });\n});\n"],"file":"setMenu.js"}