{"version":3,"sources":["../../test/deleteOneMeal.js"],"names":["chai","use","chaiHttp","describe","testId","before","dataSetup","meals","menus","orders","it","request","app","delete","response","to","have","status","body","be","an","wrongId","property","equal"],"mappings":";;AAAA;;;;;;AAQAA,YAAKC,GAAL,CAASC,eAAT;;AAEAC,QAAQ,CAAC,uEAAD,EAA0E,YAAM;AACtF,MAAIC,MAAM,GAAG,CAAb;AACAC,EAAAA,MAAM,CAAC,YAAM;AACXC,qBAAUC,KAAV;;AACAD,qBAAUE,KAAV;;AACAF,qBAAUG,MAAV;;AACAL,IAAAA,MAAM,IAAIE,iBAAUF,MAApB;AACD,GALK,CAAN;AAOAM,EAAAA,EAAE,CAAC,mFAAD;AAAA;AAAA;AAAA;AAAA,0BAAsF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC/DV,YAAKW,OAAL,CAAaC,UAAb,EAAkBC,MAAlB,qBAAsCT,MAAtC,EAD+D;;AAAA;AAChFU,YAAAA,QADgF;AAEtF,+BAAOA,QAAP,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBC,MAAzB,CAAgC,GAAhC;AACA,+BAAOH,QAAQ,CAACI,IAAhB,EAAsBH,EAAtB,CAAyBI,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B;;AAHsF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtF,GAAF;AAMAV,EAAAA,EAAE,CAAC,+FAAD;AAAA;AAAA;AAAA;AAAA,0BAAkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5FW,YAAAA,OAD4F,GAClFjB,MAAM,GAAG,EADyE;AAAA;AAAA,mBAE3EJ,YAAKW,OAAL,CAAaC,UAAb,EAAkBC,MAAlB,qBAAsCQ,OAAtC,EAF2E;;AAAA;AAE5FP,YAAAA,QAF4F;AAGlG,+BAAOA,QAAP,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBC,MAAzB,CAAgC,GAAhC;AACA,+BAAOH,QAAQ,CAACI,IAAhB,EAAsBH,EAAtB,CAAyBI,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B;AACA,+BAAON,QAAQ,CAACI,IAAhB,EAAsBH,EAAtB,CAAyBC,IAAzB,CAA8BM,QAA9B,CAAuC,SAAvC,EAAkDC,KAAlD,CAAwD,6BAAxD;;AALkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlG,GAAF;AAOD,CAtBO,CAAR","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/meals/:id\" to delete a meals option with DELETE', () => {\n  let testId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testId += dataSetup.testId;\n  });\n\n  it('should delete a meal option at \"/v1/meals/:id\" with DELETE if meals option exists', async () => {\n    const response = await chai.request(app).delete(`/v1/meals/${testId}`);\n    expect(response).to.have.status(204);\n    expect(response.body).to.be.an('object');\n  });\n\n  it('should NOT delete a meal option at \"/v1/meals/:id\" with DELETE if meals option does NOT exist', async () => {\n    const wrongId = testId + 10;\n    const response = await chai.request(app).delete(`/v1/meals/${wrongId}`);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option not found');\n  });\n});\n"],"file":"deleteOneMeal.js"}