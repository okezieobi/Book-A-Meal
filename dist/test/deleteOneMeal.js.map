{"version":3,"sources":["../../test/deleteOneMeal.js"],"names":["chai","use","chaiHttp","describe","testId","before","dataSetup","meals","menus","orders","it","request","app","delete","response","to","have","status","body","be","an","wrongId","property","equal"],"mappings":";;AAAA;;;;;;AAQAA,YAAKC,GAAL,CAASC,eAAT;;AAEAC,QAAQ,CAAC,2EAAD,EAA8E,YAAM;AAC1F,MAAIC,MAAM,GAAG,CAAb;AACAC,EAAAA,MAAM,CAAC,YAAM;AACXC,qBAAUC,KAAV;;AACAD,qBAAUE,KAAV;;AACAF,qBAAUG,MAAV;;AACAL,IAAAA,MAAM,IAAIE,iBAAUF,MAApB;AACD,GALK,CAAN;AAOAM,EAAAA,EAAE,CAAC,uFAAD;AAAA;AAAA;AAAA;AAAA,0BAA0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnEV,YAAKW,OAAL,CAAaC,UAAb,EAAkBC,MAAlB,yBAA0CT,MAA1C,EADmE;;AAAA;AACpFU,YAAAA,QADoF;AAE1F,+BAAOA,QAAP,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBC,MAAzB,CAAgC,GAAhC;AACA,+BAAOH,QAAQ,CAACI,IAAhB,EAAsBH,EAAtB,CAAyBI,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B;;AAH0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1F,GAAF;AAMAV,EAAAA,EAAE,CAAC,mGAAD;AAAA;AAAA;AAAA;AAAA,0BAAsG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChGW,YAAAA,OADgG,GACtFjB,MAAM,GAAG,EAD6E;AAAA;AAAA,mBAE/EJ,YAAKW,OAAL,CAAaC,UAAb,EAAkBC,MAAlB,yBAA0CQ,OAA1C,EAF+E;;AAAA;AAEhGP,YAAAA,QAFgG;AAGtG,+BAAOA,QAAP,EAAiBC,EAAjB,CAAoBC,IAApB,CAAyBC,MAAzB,CAAgC,GAAhC;AACA,+BAAOH,QAAQ,CAACI,IAAhB,EAAsBH,EAAtB,CAAyBI,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B;AACA,+BAAON,QAAQ,CAACI,IAAhB,EAAsBH,EAAtB,CAAyBC,IAAzB,CAA8BM,QAA9B,CAAuC,SAAvC,EAAkDC,KAAlD,CAAwD,6BAAxD;;AALsG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtG,GAAF;AAOD,CAtBO,CAAR","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/api/v1/meals/:id\" to delete a meals option with DELETE', () => {\n  let testId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testId += dataSetup.testId;\n  });\n\n  it('should delete a meal option at \"/api/v1/meals/:id\" with DELETE if meals option exists', async () => {\n    const response = await chai.request(app).delete(`/api/v1/meals/${testId}`);\n    expect(response).to.have.status(204);\n    expect(response.body).to.be.an('object');\n  });\n\n  it('should NOT delete a meal option at \"/api/v1/meals/:id\" with DELETE if meals option does NOT exist', async () => {\n    const wrongId = testId + 10;\n    const response = await chai.request(app).delete(`/api/v1/meals/${wrongId}`);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option not found');\n  });\n});\n"],"file":"deleteOneMeal.js"}