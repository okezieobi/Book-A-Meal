{"version":3,"sources":["../../test/updateMeal.js"],"names":["chai","use","chaiHttp","describe","testId","before","dataSetup","meals","menus","orders","it","testDataTwo","mealOptionName","mealOptionPrice","request","app","put","send","response","resData","body","data","to","have","status","be","an","property","equal","has","wrongId","id"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/api/v1/meals/:id\" to update OR create a meal option with PUT', () => {\n  let testId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testId += dataSetup.testId;\n  });\n\n  it('should update a meal option at \"/api/v1/meals/:id\" with PUT if all request parameters are valid and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${testId}`).send(testDataTwo);\n    const resData = response.body.data;\n    expect(response).to.have.status(200);\n    expect(response.body).to.be.an('object');\n    expect(resData).to.have.property('id').equal(testId);\n    expect(resData).to.has.property('name').equal(testDataTwo.mealOptionName);\n    expect(resData).to.has.property('price').equal(testDataTwo.mealOptionPrice);\n    expect(response.body).to.have.property('message').equal('Meal option found! Meal option successfully updated');\n  });\n\n  it('should ALSO update a meal option at \"/api/v1/meals/:id\" with PUT if all request parameters are valid and meal option does NOT exist', async () => {\n    const wrongId = testId + 10;\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${wrongId}`).send(testDataTwo);\n    const resData = response.body.data;\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(resData).to.have.property('id').equal(resData.id);\n    expect(resData).to.has.property('name').equal(testDataTwo.mealOptionName);\n    expect(resData).to.has.property('price').equal(testDataTwo.mealOptionPrice);\n    expect(response.body).to.have.property('message').equal('Meal option not found! Meal option successfully created');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option name in request does not exist and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option name in request does not exist and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/api/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option name in request is an empty string and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: '',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option name in request is an empty string and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: '',\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/api/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option name in request are NOT letters and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'p0r9]13[',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name must be letters');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option name in request are NOT letters and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'p0r9]13[',\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/api/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name must be letters');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option price in request does not exist and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option price in request does not exist and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/api/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option price in request is an empty string and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option price in request is an empty string and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/api/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option price in request are NOT numbers and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '0[d]e8f9fj](fg}',\n    };\n    const response = await chai.request(app).put(`/api/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/api/v1/meals/:id\" with PUT if meal option price in request are NOT numbers and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '0[d]e8f9fj](fg}',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/api/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price must be numbers');\n  });\n});\n"],"file":"updateMeal.js"}