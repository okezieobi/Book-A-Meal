{"version":3,"sources":["../../test/addOneMeal.js"],"names":["chai","use","chaiHttp","describe","before","dataSetup","meals","menus","orders","it","testData","mealOptionName","mealOptionPrice","request","app","post","send","response","to","have","status","body","be","an","property","equal","data","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/api/v1/meals\" to create a meal option with POST', () => {\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n  });\n  it('should create a meal option at \"/api/v1/meals\" with post if all request data are valid', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Success! Meal option created');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('name').equal(testData.mealOptionName);\n    expect(response.body.data).to.have.property('price').equal(testData.mealOptionPrice);\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option name in request does not exist', async () => {\n    const testData = {\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option name in request is an empty string', async () => {\n    const testData = {\n      mealOptionName: '',\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option name in request is undefined', async () => {\n    const testData = {\n      mealOptionName: undefined,\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option name in request is null', async () => {\n    const testData = {\n      mealOptionName: null,\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option name in request are not letters', async () => {\n    const testData = {\n      mealOptionName: '0(}fieidfjd',\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name must be letters');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option price in request does not exist', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option price in request is an empty string', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option price in request is null', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: null,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option price in request is undefined', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: undefined,\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should not create a meal option at \"/api/v1/meals\" with POST if meal option price in request is NOT a number', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: 'p0{f(jf]',\n    };\n    const response = await chai.request(app).post('/api/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price must be numbers');\n  });\n});\n"],"file":"addOneMeal.js"}