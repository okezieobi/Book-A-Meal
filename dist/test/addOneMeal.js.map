{"version":3,"sources":["../../test/addOneMeal.js"],"names":["chai","use","chaiHttp","describe","before","dataSetup","meals","menus","orders","it","testData","mealOptionName","mealOptionPrice","request","app","post","send","response","to","have","status","body","be","an","property","equal","data"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/meals\" to create a meal option with POST', () => {\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n  });\n  it('should create a meal option at \"/v1/meal\" with post if all request data are valid', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/v1/meals').send(testData);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Success! Meal option created');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('name').equal(testData.mealOptionName);\n    expect(response.body.data).to.have.property('price').equal(testData.mealOptionPrice);\n  });\n\n  it('should not create a meal option at \"/v1/meals\" with POST if meal option name in request does not exist', async () => {\n    const testData = {\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should not create a meal option at \"/v1/meals\" with POST if meal option name in request is an empty string', async () => {\n    const testData = {\n      mealOptionName: '',\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required');\n  });\n\n  it('should not create a meal option at \"/v1/meals\" with POST if meal option name in request are not letters', async () => {\n    const testData = {\n      mealOptionName: '0(}fieidfjd',\n      mealOptionPrice: 10,\n    };\n    const response = await chai.request(app).post('/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name must be letters');\n  });\n\n  it('should not create a meal option at \"/v1/meals\" with POST if meal option price in request does not exist', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n    };\n    const response = await chai.request(app).post('/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should not create a meal option at \"/v1/meals\" with POST if meal option price in request is an empty string', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const response = await chai.request(app).post('/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required');\n  });\n\n  it('should not create a meal option at \"/v1/meals\" with POST if meal option price in request is NOT a number', async () => {\n    const testData = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: 'p0{f(jf]',\n    };\n    const response = await chai.request(app).post('/v1/meals').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price must be numbers');\n  });\n});\n"],"file":"addOneMeal.js"}