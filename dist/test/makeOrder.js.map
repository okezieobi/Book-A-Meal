{"version":3,"sources":["../../test/makeOrder.js"],"names":["chai","use","chaiHttp","describe","before","dataSetup","meals","menus","orders","it","testData","customerName","menuList","request","app","post","send","response","to","have","status","be","an","body","property","equal","data","has"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/orders\" to select meal option with POST', () => {\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n  });\n\n  it('should select at least one menu option at \"/v1/orders\" with POST', async () => {\n    const testData = {\n      customerName: 'Frank',\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(201);\n    expect(response).to.be.an('object');\n    expect(response.body).to.have.property('data');\n    expect(response.body).to.have.property('message').equal('Success! Menu selected and order made');\n    expect(response.body.data).to.have.property('id');\n    expect(response.body.data).to.have.property('customer').equal(testData.customerName);\n    expect(response.body.data).to.has.property('total');\n    expect(response.body.data).to.have.property('menu');\n  });\n\n  it('should not select a menu option at \"/v1/orders\" with POST if customer name in request does not exist', async () => {\n    const testData = {\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not select a menu option at \"/v1/orders\" with POST if customer name in request is an empty string', async () => {\n    const testData = {\n      customerName: '',\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name is required');\n  });\n\n  it('should not select a menu option at \"/v1/orders\" with POST if customer name in request are not letters', async () => {\n    const testData = {\n      customerName: '0or]f{(uu',\n      menuList: 'BreakFast Dinner',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Customer name must be letters');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request does not exist', async () => {\n    const testData = {\n      customerName: 'Frank',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request is an empty string', async () => {\n    const testData = {\n      customerName: 'Frank',\n      menuList: '',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list is required');\n  });\n\n  it('should not create a menu at \"/v1/menus\" with POST if menu options in request ae not letters', async () => {\n    const testData = {\n      customerName: 'Frank',\n      menuList: '0{0rir}t[(',\n    };\n    const response = await chai.request(app).post('/v1/orders').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Menu list must be letters and seperated by spaces');\n  });\n});\n"],"file":"makeOrder.js"}