{"version":3,"sources":["../../test/updateOneMealOption.js"],"names":["chai","use","chaiHttp","describe","testId","before","dataSetup","meals","menus","orders","it","testDataTwo","mealOptionName","mealOptionPrice","request","app","put","send","response","to","have","status","body","be","an","property","equal","wrongId"],"mappings":"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","file":"updateOneMealOption.js","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/meals/:id\" to update OR create a meal option with PUT', () => {\n  let testId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testId += dataSetup.testId;\n  });\n\n  it('should update a meal option at \"/v1/meals/:id\" with PUT if all request parameters are valid and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(200);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Meal option found! Meal option successfully updated');\n  });\n\n  it('should ALSO update a meal option at \"/v1/meals/:id\" with PUT if all request parameters are valid and meal option does NOT exist', async () => {\n    const wrongId = testId + 10;\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Meal option not found! Meal option successfully created');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request does not exist and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request does not exist and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request is an empty string and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: '',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request is an empty string and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: '',\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request are NOT letters and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'p0r9]13[',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request are NOT letters and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'p0r9]13[',\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request does not exist and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request does not exist and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request is an empty string and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request is an empty string and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request are NOT numbers and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '0[d]e8f9fj](fg}',\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request are NOT numbers and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '0[d]e8f9fj](fg}',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n});\n"]}