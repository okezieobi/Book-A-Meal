{"version":3,"sources":["../../test/updateOneMealOption.js"],"names":["chai","use","chaiHttp","describe","testId","before","dataSetup","meals","menus","orders","it","testDataTwo","mealOptionName","mealOptionPrice","request","app","put","send","response","to","have","status","body","be","an","property","equal","wrongId"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n  dataSetup,\n} from './index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoint at \"/v1/meals/:id\" to update OR create a meal option with PUT', () => {\n  let testId = 0;\n  before(() => {\n    dataSetup.meals();\n    dataSetup.menus();\n    dataSetup.orders();\n    testId += dataSetup.testId;\n  });\n\n  it('should update a meal option at \"/v1/meals/:id\" with PUT if all request parameters are valid and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(200);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Meal option found! Meal option successfully updated');\n  });\n\n  it('should ALSO update a meal option at \"/v1/meals/:id\" with PUT if all request parameters are valid and meal option does NOT exist', async () => {\n    const wrongId = testId + 10;\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Meal option not found! Meal option successfully created');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request does not exist and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request does not exist and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request is an empty string and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: '',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request is an empty string and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: '',\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request are NOT letters and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'p0r9]13[',\n      mealOptionPrice: 100,\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option name in request are NOT letters and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'p0r9]13[',\n      mealOptionPrice: 100,\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option name is required OR must be letters');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request does not exist and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request does not exist and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Rice',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request is an empty string and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request is an empty string and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request are NOT numbers and meal option exists', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '0[d]e8f9fj](fg}',\n    };\n    const response = await chai.request(app).put(`/v1/meals/${testId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n\n  it('should NOT update a meal option at \"/v1/meals/:id\" with PUT if meal option price in request are NOT numbers and meal option does NOT exist', async () => {\n    const testDataTwo = {\n      mealOptionName: 'Dodo',\n      mealOptionPrice: '0[d]e8f9fj](fg}',\n    };\n    const wrongId = testId + 10;\n    const response = await chai.request(app).put(`/v1/meals/${wrongId}`).send(testDataTwo);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('message').equal('Fail! Meal option price is required OR must be numbers');\n  });\n});\n"],"file":"updateOneMealOption.js"}